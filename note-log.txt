# register system
pip install django-registration
//settins.py
ACCOUNT_ACTIVATION_DAYS = 7
//urls.py
url(r'^accounts/', include('registration.backends.hmac.urls')),
//header.html
<li><a href='/accounts/register'>REGISTER</a></li>

## register page
templates/registration/xxxxx
    registration_form.html -> registration_complete.html
//active email content
    activation_email_subject.txt
    activation_email.txt
//active success/fail page
    activation_complete.html
    activate.html

## other
//urls.py
    #for delete: (id)(user_pass) = arg => def index(request, pid=None, del_pass=None):
    url(r'^(\d+)/(\w+)/$', views.index),

## database
//forms.py
class ProfileForm(forms.ModelForm):
    class Meta:
        model = models.Profile
        fields = ['height', 'male', 'website']
//views.py
def userinfo(request):
//userinfo.html
profile_form

## database relation
//class User(models.Model):<1:1>class Profile(models.Model):
class User(models.Model):
username
password
email
first_name
last_name

class Profile(models.Model):
    user = models.OneToOneField(User, on_delete=models.CASCADE)
    height = models.PositiveIntegerField(default=160)
    male = models.BooleanField(default=False)
    website = models.URLField(null=True)

//class Diary(models.Model):<n:1>class User(models.Model):<1:1>class Profile(models.Model):
class Diary(models.Model):
    user = models.ForeignKey(User, on_delete=models.CASCADE)
    budget = models.FloatField(default=0)
    weight = models.FloatField(default=0)
    note = models.TextField()
    ddate = models.DateField()

## bug
send register email fail
//settings.py
    MAILGUN_ACCESS_KEY
    MAILGUN_SERVER_NAME

csrf error
//views.py
    html = template.render(locals(), request)
======================================================================================
# django-allauth

## database
//models.py
class Poll(models.Model):
    name = models.CharField(max_length=200, null=False)
    created_at = models.DateField(auto_now_add=True)
    enabled = models.BooleanField(default=False)

    def __str__(self):
        return self.name

@python_2_unicode_compatible
class PollItem(models.Model):
    poll = models.ForeignKey(Poll, on_delete=models.CASCADE)
    name = models.CharField(max_length=200, null=False)
    image_url = models.CharField(max_length=200, null=True, blank=True)
    vote = models.PositiveIntegerField(default=0)

    def __str__(self):
        return self.name    

//admin.py
#show detail item('user', 'name', 'created_at', 'enabled') info at admin page
class PollAdmin(admin.ModelAdmin): 
    list_display = ('user', 'name', 'created_at', 'enabled')
    ordering = ('-created_at',)

## setting
//urls.py    
    url(r'^poll/(\d+)$', views.poll, name='poll-url'),
    url(r'^vote/(\d+)/(\d+)$', views.vote, name='vote-url'),

## view
//views.py
def index(request):
def poll(request, pollid):
def vote(request, pollid, pollitemid):

## templates
header.html
index.html
poll.html

## bug
1. list_display = ('user', 'name', 'created_at', 'enabled')
(venv) dada@dada-VirtualBox:~/workspace/project/registapp$ python manage.py makemigrations
SystemCheckError: System check identified some issues:

ERRORS:
<class 'mysite.admin.PollAdmin'>: (admin.E108) The value of 'list_display[0]' refers to 'user', which is not a callable, an attribute of 'PollAdmin', or an attribute or method on 'mysite.Poll'.
//admin.py
    - list_display = ('user', 'name', 'created_at', 'enabled')
    + list_display = ('name', 'created_at', 'enabled')

2. git push heroku master
/app/.heroku/python/bin/pip: No such file or directory
把runtime.txt版本改成python-2.7.13就好惹

3. DoesNotExist at /admin/login/
http://stackoverflow.com/questions/9736975/django-admin-doesnotexist-at-admin

INSTALLED_APPS = (
    'django.contrib.sites',
)
SITE_ID = 1

[Documentation] (https://docs.djangoproject.com/en/1.11/ref/contrib/sites/)
**The “sites” framework**

Django comes with an optional “sites” framework. It’s a hook for associating objects and functionality to particular websites, and it’s a holding place for the domain names and “verbose” names of your Django-powered sites.

Use it if your single Django installation powers more than one site and you need to differentiate between those sites in some way.